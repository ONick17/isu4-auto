# Form implementation generated from reading ui file 'qt_main.ui'
#
# Created by: PyQt6 UI code generator 6.6.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
'''
Интерфейс главного окна.
'''
from PyQt6 import QtCore, QtGui, QtWidgets
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT
from matplotlib.figure import Figure
import pandas as pd
import numpy as np 

from qt_new_objects import DialogNewObjects
from qt_add_object import DialogAddObject
from myparser import DataProcessor, GameObject



ind_to_object = ["СЭС",
                 "ВЭС",
                 "Микрорайон",
                 "Завод",
                 "Больница"]

object_to_ind = {"СЭС": 0,
                 "ВЭС": 1,
                 "Микрорайон": 2,
                 "Завод": 3,
                 "Больница": 4}

object_to_max = {"СЭС": "Солнце",
                 "ВЭС": "Ветер",
                 "Микрорайон": "Дома",
                 "Завод": "Заводы",
                 "Больница": "Больницы"}



# Класс для отображения графиков
class MplCanvas(FigureCanvasQTAgg):
    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        super(MplCanvas, self).__init__(fig)



#Класс с интерфейсом главного окна
class MyMainWindow(object):
    def __init__(self):
        self.objects_count = {"СЭС": 0, "ВЭС": 0, "Микрорайон": 0, "Завод": 0, "Больница": 0}
        self.enemy_objects_count = {"СЭС": 0, "ВЭС": 0, "Микрорайон": 0, "Завод": 0, "Больница": 0}
        self.my_objects_count = {"СЭС": 0, "ВЭС": 0, "Микрорайон": 0, "Завод": 0, "Больница": 0}
        self.my_objects = pd.DataFrame({"object": [], "price": []})
        # self.last_prices = {"СЭС": None, "ВЭС": None, "Микрорайон": None, "Завод": None, "Больница": None}
        self.qt_widget = None
        self.data_processor = DataProcessor()


    def setupUi(self, MainWindow):
        self.qt_widget = MainWindow
        self.qt_widget.setObjectName("MainWindow")
        self.qt_widget.resize(1200, 790)
        self.centralwidget = QtWidgets.QWidget(parent=self.qt_widget)
        self.centralwidget.setObjectName("centralwidget")

        # ВЫБОР ФАЙЛА
        font = QtGui.QFont()
        font.setPointSize(12)
        # Кнопка выбора файла
        self.btn_select_file = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btn_select_file.setGeometry(QtCore.QRect(20, 10, 150, 40))
        self.btn_select_file.setFont(font)
        self.btn_select_file.setObjectName("btn_select_file")
        # Подпись "Для начала работы выберите CSV-файл"
        font.setPointSize(10)
        self.lbl_select_file = QtWidgets.QLabel(parent=self.centralwidget)
        self.lbl_select_file.setGeometry(QtCore.QRect(180, 15, 320, 30))
        self.lbl_select_file.setFont(font)
        self.lbl_select_file.setObjectName("lbl_select_file")


        # ГРАФИК И ЕГО НАСТРОЙКИ
        # Подпись "График"
        self.lbl_plot_mode = QtWidgets.QLabel(parent=self.centralwidget)
        self.lbl_plot_mode.setGeometry(QtCore.QRect(20, 60, 70, 20))
        self.lbl_plot_mode.setFont(font)
        self.lbl_plot_mode.setObjectName("lbl_plot_mode")
        # Выпадающий список для выбора графика
        self.lstbox_plot_mode = QtWidgets.QComboBox(parent=self.centralwidget)
        self.lstbox_plot_mode.setGeometry(QtCore.QRect(100, 60, 200, 20))
        self.lstbox_plot_mode.setObjectName("lstbox_plot_mode")
        self.lstbox_plot_mode.addItem("Оригинальный прогноз")
        self.lstbox_plot_mode.addItem("Прогноз по вашим объектам")
        self.lstbox_plot_mode.setCurrentIndex(0)

        # Подпись "Показывать"
        self.lbl_plot_show = QtWidgets.QLabel(parent=self.centralwidget)
        self.lbl_plot_show.setGeometry(QtCore.QRect(20, 85, 70, 20))
        self.lbl_plot_show.setFont(font)
        self.lbl_plot_show.setObjectName("lbl_plot_show")
        # Выпадающий список для выбора графика
        self.lstbox_plot_show = QtWidgets.QComboBox(parent=self.centralwidget)
        self.lstbox_plot_show.setGeometry(QtCore.QRect(100, 85, 200, 20))
        self.lstbox_plot_show.setObjectName("lstbox_plot_show")
        self.lstbox_plot_show.addItem("Всё")
        self.lstbox_plot_show.addItem("Производители")
        self.lstbox_plot_show.addItem("Потребители")
        self.lstbox_plot_show.setCurrentIndex(0)

        # Подпись "Отклонение данных"
        self.lbl_deviations = QtWidgets.QLabel(parent=self.centralwidget)
        self.lbl_deviations.setGeometry(QtCore.QRect(20, 110, 160, 20))
        self.lbl_deviations.setFont(font)
        self.lbl_deviations.setObjectName("lbl_deviations")
        # Выбор погрешности для:
        # "Солнце"
        self.lbl_deviation_sun = QtWidgets.QLabel(parent=self.centralwidget)
        self.lbl_deviation_sun.setGeometry(QtCore.QRect(20, 135, 50, 20))
        self.lbl_deviation_sun.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_deviation_sun.setObjectName("lbl_deviation_sun")
        # Солнце
        self.lstbox_deviation_sun = QtWidgets.QComboBox(parent=self.centralwidget)
        self.lstbox_deviation_sun.setGeometry(QtCore.QRect(70, 135, 55, 20))
        self.lstbox_deviation_sun.setObjectName("lstbox_deviation_sun")
        self.lstbox_deviation_sun.addItem("+25%")
        self.lstbox_deviation_sun.addItem("0%")
        self.lstbox_deviation_sun.addItem("-17%")
        self.lstbox_deviation_sun.setCurrentIndex(1)
        # "Ветер"
        self.lbl_deviation_wind = QtWidgets.QLabel(parent=self.centralwidget)
        self.lbl_deviation_wind.setGeometry(QtCore.QRect(130, 135, 40, 20))
        self.lbl_deviation_wind.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_deviation_wind.setObjectName("lbl_deviation_wind")
        # Ветер
        self.lstbox_deviation_wind = QtWidgets.QComboBox(parent=self.centralwidget)
        self.lstbox_deviation_wind.setGeometry(QtCore.QRect(170, 135, 55, 20))
        self.lstbox_deviation_wind.setObjectName("lstbox_deviation_wind")
        self.lstbox_deviation_wind.addItem("+25%")
        self.lstbox_deviation_wind.addItem("0%")
        self.lstbox_deviation_wind.addItem("-17%")
        self.lstbox_deviation_wind.setCurrentIndex(1)
        # "Дома"
        self.lbl_deviation_house = QtWidgets.QLabel(parent=self.centralwidget)
        self.lbl_deviation_house.setGeometry(QtCore.QRect(230, 135, 80, 20))
        self.lbl_deviation_house.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_deviation_house.setObjectName("lbl_deviation_house")
        # Дома
        self.lstbox_deviation_house = QtWidgets.QComboBox(parent=self.centralwidget)
        self.lstbox_deviation_house.setGeometry(QtCore.QRect(310, 135, 55, 20))
        self.lstbox_deviation_house.setObjectName("lstbox_deviation_house")
        self.lstbox_deviation_house.addItem("+25%")
        self.lstbox_deviation_house.addItem("0%")
        self.lstbox_deviation_house.addItem("-17%")
        self.lstbox_deviation_house.setCurrentIndex(1)
        # "Заводы"
        self.lbl_deviation_factory = QtWidgets.QLabel(parent=self.centralwidget)
        self.lbl_deviation_factory.setGeometry(QtCore.QRect(370, 135, 40, 20))
        self.lbl_deviation_factory.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_deviation_factory.setObjectName("lbl_deviation_factory")
        # Заводы
        self.lstbox_deviation_factory = QtWidgets.QComboBox(parent=self.centralwidget)
        self.lstbox_deviation_factory.setGeometry(QtCore.QRect(410, 135, 55, 20))
        self.lstbox_deviation_factory.setObjectName("lstbox_deviation_factory")
        self.lstbox_deviation_factory.addItem("+25%")
        self.lstbox_deviation_factory.addItem("0%")
        self.lstbox_deviation_factory.addItem("-17%")
        self.lstbox_deviation_factory.setCurrentIndex(1)
        # "Больницы"
        self.lbl_deviation_hospital = QtWidgets.QLabel(parent=self.centralwidget)
        self.lbl_deviation_hospital.setGeometry(QtCore.QRect(470, 135, 60, 20))
        self.lbl_deviation_hospital.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_deviation_hospital.setObjectName("lbl_deviation_hospital")
        # Больницы
        self.lstbox_deviation_hospital = QtWidgets.QComboBox(parent=self.centralwidget)
        self.lstbox_deviation_hospital.setGeometry(QtCore.QRect(530, 135, 55, 20))
        self.lstbox_deviation_hospital.setObjectName("lstbox_deviation_hospital")
        self.lstbox_deviation_hospital.addItem("+25%")
        self.lstbox_deviation_hospital.addItem("0%")
        self.lstbox_deviation_hospital.addItem("-17%")
        self.lstbox_deviation_hospital.setCurrentIndex(1)
        
        # График
        self.pyplot_layout = QtWidgets.QVBoxLayout()
        self.pyplot = MplCanvas(self, width=5, height=4, dpi=100)
        self.pyplot_layout.addWidget(self.pyplot)
        self.pyplot_layout.addWidget(NavigationToolbar2QT(self.pyplot, parent=self.centralwidget))
        self.pyplot_widget = QtWidgets.QWidget(parent=self.centralwidget)
        self.pyplot_widget.setLayout(self.pyplot_layout)
        self.pyplot_widget.setGeometry(QtCore.QRect(20, 160, 750, 530))
        self.pyplot_widget.setObjectName("pyplot")

        # Подпись "Среднее накопление энергии"
        font.setPointSize(12)
        self.lbl_mean_energy = QtWidgets.QLabel(parent=self.centralwidget)
        self.lbl_mean_energy.setGeometry(QtCore.QRect(190, 700, 280, 20))
        self.lbl_mean_energy.setFont(font)
        self.lbl_mean_energy.setObjectName("lbl_mean_energy")
        # Среднее накопление энергии
        self.lbl_mean_energy2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.lbl_mean_energy2.setGeometry(QtCore.QRect(480, 700, 100, 20))
        self.lbl_mean_energy2.setFont(font)
        self.lbl_mean_energy2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lbl_mean_energy2.setObjectName("lbl_mean_energy2")
        # Подпись "Ожидаемые потери энергии"
        self.lbl_mean_lost = QtWidgets.QLabel(parent=self.centralwidget)
        self.lbl_mean_lost.setGeometry(QtCore.QRect(190, 730, 280, 20))
        self.lbl_mean_lost.setFont(font)
        self.lbl_mean_lost.setObjectName("lbl_mean_lost")
        # Ожидаемые потери энергии
        self.lbl_mean_lost2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.lbl_mean_lost2.setGeometry(QtCore.QRect(480, 730, 100, 20))
        self.lbl_mean_lost2.setFont(font)
        self.lbl_mean_lost2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lbl_mean_lost2.setObjectName("lbl_mean_lost2")
        

        # АУКЦИОН
        # Группа
        self.group_shop = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.group_shop.setGeometry(QtCore.QRect(780, 10, 410, 740))
        self.group_shop.setFont(font)
        self.group_shop.setObjectName("group_shop")

        # Подпись "Число объектов в игре"
        font.setPointSize(10)
        self.lbl_count_objects = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_count_objects.setGeometry(QtCore.QRect(10, 30, 200, 30))
        self.lbl_count_objects.setFont(font)
        self.lbl_count_objects.setObjectName("lbl_count_objects")
        # Кнопка "Ввести новое"
        self.btn_count_objects = QtWidgets.QPushButton(parent=self.group_shop)
        self.btn_count_objects.setGeometry(QtCore.QRect(200, 30, 200, 30))
        self.btn_count_objects.setFont(font)
        self.btn_count_objects.setObjectName("btn_count_objects")

        # Число объектов:
        # font.setPointSize(8)
        # "Солнце"
        self.lbl_count_sun = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_count_sun.setGeometry(QtCore.QRect(10, 70, 40, 20))
        self.lbl_count_sun.setFont(font)
        self.lbl_count_sun.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_count_sun.setObjectName("lbl_count_sun")
        # Солнце
        self.lbl_count_sun2 = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_count_sun2.setGeometry(QtCore.QRect(50, 70, 100, 20))
        self.lbl_count_sun2.setFont(font)
        self.lbl_count_sun2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lbl_count_sun2.setObjectName("lbl_count_sun2")
        # "Ветер"
        self.lbl_count_wind = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_count_wind.setGeometry(QtCore.QRect(10, 100, 40, 20))
        self.lbl_count_wind.setFont(font)
        self.lbl_count_wind.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_count_wind.setObjectName("lbl_count_wind")
        # Ветер
        self.lbl_count_wind2 = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_count_wind2.setGeometry(QtCore.QRect(50, 100, 100, 20))
        self.lbl_count_wind2.setFont(font)
        self.lbl_count_wind2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lbl_count_wind2.setObjectName("lbl_count_wind2")
        # "Дома"
        self.lbl_count_house = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_count_house.setGeometry(QtCore.QRect(200, 70, 80, 20))
        self.lbl_count_house.setFont(font)
        self.lbl_count_house.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_count_house.setObjectName("lbl_count_house")
        # Дома
        self.lbl_count_house2 = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_count_house2.setGeometry(QtCore.QRect(280, 70, 100, 20))
        self.lbl_count_house2.setFont(font)
        self.lbl_count_house2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lbl_count_house2.setObjectName("lbl_count_house2")
        # "Заводы"
        self.lbl_count_factory = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_count_factory.setGeometry(QtCore.QRect(200, 100, 80, 20))
        self.lbl_count_factory.setFont(font)
        self.lbl_count_factory.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_count_factory.setObjectName("lbl_count_factory")
        # Заводы
        self.lbl_count_factory2 = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_count_factory2.setGeometry(QtCore.QRect(280, 100, 100, 20))
        self.lbl_count_factory2.setFont(font)
        self.lbl_count_factory2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lbl_count_factory2.setObjectName("lbl_count_factory2")
        # "Больницы"
        self.lbl_count_hospital = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_count_hospital.setGeometry(QtCore.QRect(200, 130, 80, 20))
        self.lbl_count_hospital.setFont(font)
        self.lbl_count_hospital.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_count_hospital.setObjectName("lbl_count_hospital")
        # Больницы
        self.lbl_count_hospital2 = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_count_hospital2.setGeometry(QtCore.QRect(280, 130, 100, 20))
        self.lbl_count_hospital2.setFont(font)
        self.lbl_count_hospital2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lbl_count_hospital2.setObjectName("lbl_count_hospital2")

        # Подпись "Рекоммендованные цены"
        font.setPointSize(10)
        self.lbl_best_prices = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_best_prices.setGeometry(QtCore.QRect(10, 160, 210, 30))
        self.lbl_best_prices.setFont(font)
        self.lbl_best_prices.setObjectName("lbl_best_prices")
        # Рекоммендованные цены для:
        # font.setPointSize(8)
        # "Солнце"
        self.lbl_price_sun = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_price_sun.setGeometry(QtCore.QRect(10, 200, 40, 20))
        self.lbl_price_sun.setFont(font)
        self.lbl_price_sun.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_price_sun.setObjectName("lbl_price_sun")
        # Солнце
        self.lbl_price_sun2 = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_price_sun2.setGeometry(QtCore.QRect(50, 200, 30, 20))
        self.lbl_price_sun2.setFont(font)
        self.lbl_price_sun2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lbl_price_sun2.setObjectName("lbl_price_sun2")
        # "Ветер"
        self.lbl_price_wind = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_price_wind.setGeometry(QtCore.QRect(10, 230, 40, 20))
        self.lbl_price_wind.setFont(font)
        self.lbl_price_wind.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_price_wind.setObjectName("lbl_price_wind")
        # Ветер
        self.lbl_price_wind2 = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_price_wind2.setGeometry(QtCore.QRect(50, 230, 30, 20))
        self.lbl_price_wind2.setFont(font)
        self.lbl_price_wind2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lbl_price_wind2.setObjectName("lbl_price_wind2")
        # "Дома"
        self.lbl_price_house = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_price_house.setGeometry(QtCore.QRect(200, 200, 80, 20))
        self.lbl_price_house.setFont(font)
        self.lbl_price_house.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_price_house.setObjectName("lbl_price_house")
        # Дома
        self.lbl_price_house2 = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_price_house2.setGeometry(QtCore.QRect(280, 200, 30, 20))
        self.lbl_price_house2.setFont(font)
        self.lbl_price_house2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lbl_price_house2.setObjectName("lbl_price_house2")
        # "Заводы"
        self.lbl_price_factory = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_price_factory.setGeometry(QtCore.QRect(200, 230, 80, 20))
        self.lbl_price_factory.setFont(font)
        self.lbl_price_factory.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_price_factory.setObjectName("lbl_price_factory")
        # Заводы
        self.lbl_price_factory2 = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_price_factory2.setGeometry(QtCore.QRect(280, 230, 30, 20))
        self.lbl_price_factory2.setFont(font)
        self.lbl_price_factory2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lbl_price_factory2.setObjectName("lbl_price_factory2")
        # "Больницы"
        self.lbl_price_hospital = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_price_hospital.setGeometry(QtCore.QRect(200, 260, 80, 20))
        self.lbl_price_hospital.setFont(font)
        self.lbl_price_hospital.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_price_hospital.setObjectName("lbl_price_hospital")
        # Больницы
        self.lbl_price_hospital2 = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_price_hospital2.setGeometry(QtCore.QRect(280, 260, 30, 20))
        self.lbl_price_hospital2.setFont(font)
        self.lbl_price_hospital2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lbl_price_hospital2.setObjectName("lbl_price_hospital2")
        
        # Подпись "Мои объекты"
        font.setPointSize(10)
        self.lbl_my_objects = QtWidgets.QLabel(parent=self.group_shop)
        self.lbl_my_objects.setGeometry(QtCore.QRect(10, 290, 110, 30))
        self.lbl_my_objects.setFont(font)
        self.lbl_my_objects.setObjectName("lbl_my_objects")
        # Пролистываемая область
        self.scroll_my_objects = QtWidgets.QScrollArea(parent=self.group_shop)
        self.scroll_my_objects.setGeometry(QtCore.QRect(10, 320, 390, 291))
        self.scroll_my_objects.setWidgetResizable(True)
        self.scroll_my_objects.setObjectName("scroll_my_objects")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 388, 329))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        # Таблица с объектами
        self.table_my_objects = QtWidgets.QTableWidget(parent=self.scrollAreaWidgetContents)
        self.table_my_objects.setGeometry(QtCore.QRect(0, 0, 390, 291))
        self.table_my_objects.setObjectName("table_my_objects")
        self.table_my_objects.setColumnCount(3)
        self.table_my_objects.setHorizontalHeaderLabels(["Тип объекта", "Цена", "Удалить?"])  
        self.table_my_objects.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeMode.Stretch)
        self.table_my_objects.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        self.table_my_objects.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeMode.ResizeToContents)
        self.table_my_objects.setRowCount(0)
        self.scroll_my_objects.setWidget(self.scrollAreaWidgetContents)
        # Кнопка "Добавить мой объект"
        self.btn_add_my_object = QtWidgets.QPushButton(parent=self.group_shop)
        self.btn_add_my_object.setGeometry(QtCore.QRect(10, 620, 390, 30))
        self.btn_add_my_object.setFont(font)
        self.btn_add_my_object.setObjectName("btn_add_my_object")
        # Кнопка "Добавить объект противника"
        self.btn_add_not_my_object = QtWidgets.QPushButton(parent=self.group_shop)
        self.btn_add_not_my_object.setGeometry(QtCore.QRect(10, 660, 390, 30))
        self.btn_add_not_my_object.setFont(font)
        self.btn_add_not_my_object.setObjectName("btn_add_not_my_object")
        # Кнопка "Очистить объекты противника"
        self.btn_clear_not_my_objects = QtWidgets.QPushButton(parent=self.group_shop)
        self.btn_clear_not_my_objects.setGeometry(QtCore.QRect(10, 700, 390, 30))
        self.btn_clear_not_my_objects.setFont(font)
        self.btn_clear_not_my_objects.setObjectName("btn_clear_not_my_objects")
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        self.add_functions()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # Перевод текста
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Экспертная система принятия решений для ИЭС"))
        self.lbl_plot_mode.setText(_translate("MainWindow", "График"))
        self.lbl_plot_show.setText(_translate("MainWindow", "Показывать"))
        self.lbl_deviation_sun.setText(_translate("MainWindow", "Солнце"))
        self.btn_select_file.setText(_translate("MainWindow", "Выбрать файл"))
        self.lbl_deviations.setText(_translate("MainWindow", "Отклонение данных"))
        self.lbl_select_file.setText(_translate("MainWindow", "Для начала работы выберите CSV-файл"))
        self.lbl_deviation_wind.setText(_translate("MainWindow", "Ветер"))
        self.lbl_deviation_house.setText(_translate("MainWindow", "Микрорайон"))
        self.lbl_deviation_factory.setText(_translate("MainWindow", "Завод"))
        self.lbl_deviation_hospital.setText(_translate("MainWindow", "Больница"))
        self.lbl_mean_energy.setText(_translate("MainWindow", "Среднее накопление энергии:"))
        self.lbl_mean_lost.setText(_translate("MainWindow", "Ожидаемые потери энергии:"))
        self.lbl_mean_energy2.setText(_translate("MainWindow", "0МВт"))
        self.lbl_mean_lost2.setText(_translate("MainWindow", "0МВт"))
        self.group_shop.setTitle(_translate("MainWindow", "Аукцион"))
        self.btn_count_objects.setText(_translate("MainWindow", "Ввести новое"))
        self.lbl_count_sun.setText(_translate("MainWindow", "СЭС:"))
        self.lbl_count_objects.setText(_translate("MainWindow", "Число объектов в игре:"))
        self.lbl_count_wind.setText(_translate("MainWindow", "ВЭС:"))
        self.lbl_count_factory.setText(_translate("MainWindow", "Завод:"))
        self.lbl_count_house.setText(_translate("MainWindow", "Микрорайон:"))
        self.lbl_count_hospital.setText(_translate("MainWindow", "Больница:"))
        self.lbl_price_house.setText(_translate("MainWindow", "Микрорайон:"))
        self.lbl_price_wind.setText(_translate("MainWindow", "ВЭС:"))
        self.lbl_price_factory.setText(_translate("MainWindow", "Завод:"))
        self.lbl_price_hospital.setText(_translate("MainWindow", "Больница:"))
        self.lbl_price_sun.setText(_translate("MainWindow", "СЭС:"))
        self.lbl_best_prices.setText(_translate("MainWindow", "Рекомендованные цены:"))
        self.lbl_count_sun2.setText(_translate("MainWindow", "0 (осталось 0)"))
        self.lbl_count_wind2.setText(_translate("MainWindow", "0 (осталось 0)"))
        self.lbl_count_house2.setText(_translate("MainWindow", "0 (осталось 0)"))
        self.lbl_count_factory2.setText(_translate("MainWindow", "0 (осталось 0)"))
        self.lbl_count_hospital2.setText(_translate("MainWindow", "0 (осталось 0)"))
        self.lbl_price_wind2.setText(_translate("MainWindow", "0"))
        self.lbl_price_sun2.setText(_translate("MainWindow", "0"))
        self.lbl_price_house2.setText(_translate("MainWindow", "0"))
        self.lbl_price_factory2.setText(_translate("MainWindow", "0"))
        self.lbl_price_hospital2.setText(_translate("MainWindow", "0"))
        self.lbl_my_objects.setText(_translate("MainWindow", "Мои объекты:"))
        self.btn_add_my_object.setText(_translate("MainWindow", "Добавить мой объект"))
        self.btn_add_not_my_object.setText(_translate("MainWindow", "Добавить объект противника"))
        self.btn_clear_not_my_objects.setText(_translate("MainWindow", "Очистить объекты противника"))

    # Привязка функций к интерфейсу
    def add_functions(self):
        # Нажатие на кнопку "Выбрать файл" и выбор файла
        self.btn_select_file.clicked.connect(self.browse_files)
        # Изменение графика
        self.lstbox_plot_mode.currentIndexChanged.connect(self.change_pyplot_data)
        # Изменение выбора отображения
        self.lstbox_plot_show.currentIndexChanged.connect(self.change_pyplot_data)
        # Изменение отклонений данных
        self.lstbox_deviation_sun.currentIndexChanged.connect(self.change_pyplot_data)
        self.lstbox_deviation_wind.currentIndexChanged.connect(self.change_pyplot_data)
        self.lstbox_deviation_house.currentIndexChanged.connect(self.change_pyplot_data)
        self.lstbox_deviation_factory.currentIndexChanged.connect(self.change_pyplot_data)
        self.lstbox_deviation_hospital.currentIndexChanged.connect(self.change_pyplot_data)
        # Ввод числа объектов в игре
        self.btn_count_objects.clicked.connect(self.new_objects)
        # Ввод объектов игрока и противника
        self.btn_add_my_object.clicked.connect(self.add_my_object)
        self.btn_add_not_my_object.clicked.connect(self.add_not_my_object)
        self.btn_clear_not_my_objects.clicked.connect(self.clear_not_my_objects)


    # Открытие проводника выбора файла
    def browse_files(self):
        fl = QtWidgets.QFileDialog.getOpenFileName(None, "Choose forecast", "", "(*.csv)")
        if fl:
            self.lbl_select_file.setText(fl[0])
            self.check_file()


    # Проверка выбранного файла на соответствие
    def check_file(self):
        #Пытается считать путь к файлу
        fl = self.lbl_select_file.text()
        if (fl == "") or (fl.isspace()):
            self.lbl_select_file.setText("Выберите файл с прогнозом (в расширении csv)")
        else:
            #Чтение ожидаемого файла
            try:
                self.data_processor.parse(fl)
                self.change_pyplot_data()
                self.update_mean_labels()
                self.update_price_labels()
            except Exception:
                self.lbl_select_file.setText("С файлом что-то не так!")


    # Изменение графика
    def change_pyplot_data(self):
        try:
            # Очистка графика
            self.pyplot.axes.cla()
            if not self.data_processor.data.empty:
                # 0 - всё
                # 1 - производители
                # 2 - потребители
                show = self.lstbox_plot_show.currentIndex()
                if (show == 0):
                    to_show = {"Солнце": [], "Ветер": [], "Дома": [], "Заводы": [], "Больницы": []}
                elif (show == 1):
                    to_show = {"Солнце": [], "Ветер": []}
                else:
                    to_show = {"Дома": [], "Заводы": [], "Больницы": []}
                # 0 - +25
                # 1 - 0
                # 2 - -17
                sun = self.lstbox_deviation_sun.currentIndex()
                wind = self.lstbox_deviation_wind.currentIndex()
                house = self.lstbox_deviation_house.currentIndex()
                factory = self.lstbox_deviation_factory.currentIndex()
                hospital = self.lstbox_deviation_hospital.currentIndex()

                # Определение обращений к датафрейму по выбраным отклонениям данных
                if (sun == 0):
                    sun = "Солнце25"
                elif (sun == 1):
                    sun = "Солнце"
                else:
                    sun = "Солнце17"
                if (wind == 0):
                    wind = "Ветер25"
                elif (wind == 1):
                    wind = "Ветер"
                else:
                    wind = "Ветер17"
                if (house == 0):
                    house = "Дома25"
                elif (house == 1):
                    house = "Дома"
                else:
                    house = "Дома17"
                if (factory == 0):
                    factory = "Заводы25"
                elif (factory == 1):
                    factory = "Заводы"
                else:
                    factory = "Заводы17"
                if (hospital == 0):
                    hospital = "Больницы25"
                elif (hospital == 1):
                    hospital = "Больницы"
                else:
                    hospital = "Больницы17"
                # Множители для графика
                # 0 - Оригинальный прогноз
                # 1 - Прогноз по вашим объектам
                mode = self.lstbox_plot_mode.currentIndex()
                if (mode == 0):
                    sun_count = 1
                    wind_count = 1
                    house_count = 1
                    factory_count = 1
                    hospital_count = 1
                else:
                    sun_count = self.my_objects_count["СЭС"]
                    wind_count = self.my_objects_count["ВЭС"]
                    house_count = self.my_objects_count["Микрорайон"]
                    factory_count = self.my_objects_count["Завод"]
                    hospital_count = self.my_objects_count["Больница"]
                # Сбор графика
                for building in list(to_show.keys()):
                    if building == "Солнце":
                        self.pyplot.axes.plot(self.data_processor.data.loc[:, sun]*sun_count, label="Солнце")
                    elif building == "Ветер":
                        self.pyplot.axes.plot(self.data_processor.data.loc[:, wind]*wind_count, label="Ветер")
                    elif building == "Дома":
                        self.pyplot.axes.plot(self.data_processor.data.loc[:, house]*house_count, label="Дома")
                    elif building == "Заводы":
                        self.pyplot.axes.plot(self.data_processor.data.loc[:, factory]*factory_count, label="Заводы")
                    elif building == "Больницы":
                        self.pyplot.axes.plot(self.data_processor.data.loc[:, hospital]*hospital_count, label="Больницы")
                # plt.legend(list(data.keys()))
                self.pyplot.axes.legend()
                self.pyplot.draw()
        except Exception as error:
            print("функция change_pyplot_data")
            print(error)


    # Ввод объектов, учавствующих в игре
    def new_objects(self):
        try:
            Dialog = QtWidgets.QDialog(parent=self.qt_widget)
            dialog_new_objects = DialogNewObjects()
            dialog_new_objects.setupUi(Dialog)
            if Dialog.exec():
                # print(dialog_new_objects.return_)
                new_data = dialog_new_objects.return_.copy()
                self.objects_count["СЭС"] = new_data[0]
                self.objects_count["ВЭС"] = new_data[1]
                self.objects_count["Микрорайон"] = new_data[2]
                self.objects_count["Завод"] = new_data[3]
                self.objects_count["Больница"] = new_data[4]
                self.enemy_objects_count = {"СЭС": 0, "ВЭС": 0, "Микрорайон": 0, "Завод": 0, "Больница": 0}
                self.data_processor.reset()
                # self.last_prices = {"СЭС": None, "ВЭС": None, "Микрорайон": None, "Завод": None, "Больница": None}
                objects_count2 = {}
                objects_count2["Солнце"] = new_data[0]
                objects_count2["Ветер"] = new_data[1]
                objects_count2["Дома"] = new_data[2]
                objects_count2["Заводы"] = new_data[3]
                objects_count2["Больницы"] = new_data[4]
                self.data_processor.set_all_objects_count(objects_count2)
                self.update_count_labels()
                self.update_price_labels()
        except Exception as error:
            print("функция new_objects")
            print(error)


    # Ввод объекта, купленного игроком
    def add_my_object(self):
        try:
            Dialog = QtWidgets.QDialog(parent=self.qt_widget)
            dialog_add_object = DialogAddObject()
            dialog_add_object.setupUi(Dialog)
            if Dialog.exec():
                new_data = dialog_add_object.return_.copy()
                self.my_objects = pd.concat([self.my_objects, pd.DataFrame({'object': [new_data[0]], 'price': [new_data[1]]})], ignore_index=True)
                rowPosition = self.table_my_objects.rowCount()
                deleteButton = QtWidgets.QPushButton("Удалить")
                deleteButton.clicked.connect(self.delete_clicked)
                self.table_my_objects.insertRow(rowPosition)
                self.table_my_objects.setItem(rowPosition, 0, QtWidgets.QTableWidgetItem(ind_to_object[new_data[0]]))
                self.table_my_objects.setItem(rowPosition, 1, QtWidgets.QTableWidgetItem(str(new_data[1])))
                self.table_my_objects.setCellWidget(rowPosition, 2, deleteButton)
                self.my_objects_count[ind_to_object[new_data[0]]] += 1
                self.data_processor.add_object(GameObject(object_to_max[ind_to_object[new_data[0]]], new_data[1]), False)
                self.change_pyplot_data()
                self.update_count_labels()
                self.update_mean_labels()
                self.update_price_labels()
        except Exception as error:
            print("функция add_my_object")
            print(error)


    # Ввод объекта, купленного противником
    def add_not_my_object(self):
        try:
            Dialog = QtWidgets.QDialog(parent=self.qt_widget)
            dialog_add_object = DialogAddObject()
            dialog_add_object.setupUi(Dialog)
            if Dialog.exec():
                new_data = dialog_add_object.return_.copy()
                # self.last_prices[ind_to_object[new_data[0]]] = new_data[1]
                self.enemy_objects_count[ind_to_object[new_data[0]]] += 1
                self.data_processor.add_object(GameObject(object_to_max[ind_to_object[new_data[0]]], new_data[1]), True)
                self.update_count_labels()
                self.update_price_labels()
        except Exception as error:
            print("функция add_not_my_object")
            print(error)


    # Очистка списка объектов противника
    def clear_not_my_objects(self):
        self.enemy_objects_count = {"СЭС": 0, "ВЭС": 0, "Микрорайон": 0, "Завод": 0, "Больница": 0}
        self.data_processor.reset()
        # self.last_prices = {"СЭС": None, "ВЭС": None, "Микрорайон": None, "Завод": None, "Больница": None}
        self.update_count_labels()
        self.update_price_labels()


    # Удаление объекта из таблицы
    def delete_clicked(self):
        try:
            button = self.qt_widget.sender()
            if button:
                row = self.table_my_objects.indexAt(button.pos()).row()
                price = float(self.table_my_objects.item(row, 1).text())
                object = self.table_my_objects.item(row, 0).text()
                self.data_processor.remove(object_to_max[object], price, False)
                self.my_objects_count[object] -= 1
                object = object_to_ind[object]
                indexToDrop = self.my_objects[(self.my_objects.object == object) & (self.my_objects.price == price)].index[0]
                self.my_objects = self.my_objects.drop(indexToDrop)
                self.table_my_objects.removeRow(row)
                self.change_pyplot_data()
                self.update_count_labels()
                self.update_mean_labels()
                self.update_price_labels()
        except Exception as error:
            print("функция delete_clicked")
            print(error)


    # Подсчёт количества объектов и вывод информации в лейблах
    def update_count_labels(self):
        try:
            #"0 (осталось 0)"
            counts = []
            for object in list(self.objects_count.keys()):
                counts.append(self.objects_count[object] - self.enemy_objects_count[object] - self.my_objects_count[object])
            self.lbl_count_sun2.setText(str(self.objects_count["СЭС"]) + " (осталось " + str(counts[0]) + ")")
            self.lbl_count_wind2.setText(str(self.objects_count["ВЭС"]) + " (осталось " + str(counts[1]) + ")")
            self.lbl_count_house2.setText(str(self.objects_count["Микрорайон"]) + " (осталось " + str(counts[2]) + ")")
            self.lbl_count_factory2.setText(str(self.objects_count["Завод"]) + " (осталось " + str(counts[3]) + ")")
            self.lbl_count_hospital2.setText(str(self.objects_count["Больница"]) + " (осталось " + str(counts[4]) + ")")
        except Exception as error:
            print("функция update_count_labels")
            print(error)


    # Подсчёт средних счётчиков и вывод информации в лейблах
    def update_mean_labels(self):
        if not self.data_processor.data.empty:
            try:
                # Вывод среднего накопления энергии
                #"0МВт"
                self.lbl_mean_energy2.setText(str(int(self.data_processor.get_mean_energy_store())) + "МВт")
            except Exception as error:
                print("функция update_mean_labels, lbl_mean_energy2")
                print(error)
                self.lbl_mean_energy2.setText("0МВт")
                
            try:
                # Вывод средней потери энергии за ход из-за КПД проводов
                # Максимальный уровень потерь в 20% достигается при суммарной мощности на ветке в 18 МВт независимо от того, генератор или потребитель находятся на этой ветке.
                # Ожидаемые потери: 20%, если больше или равно 18МВт. ?%, если меньше 18МВт
                # Предположение: (x/4)^2=процент потери, где x - текущая энергия
                # Максимальное число веток: 5, если одна миниподстанция
                # Рассчёт среднего числа производимой энергии за ход
                mean_lost_plus = np.mean(self.data_processor.data["Солнце"])*self.my_objects_count["СЭС"]+np.mean(self.data_processor.data["Ветер"])*self.my_objects_count["ВЭС"]
                # Рассчёт примерной потери энергии при передаче от производителей до главной станции
                if mean_lost_plus > 36:
                    mean_lost_plus *= 0.2
                elif mean_lost_plus > 18:
                    mean_lost_plus = 18*0.2 + (mean_lost_plus-18)*(((mean_lost_plus-18)/4)**2)/100
                else:
                    mean_lost_plus = mean_lost_plus * ((mean_lost_plus/4)**2) / 100

                # Рассчёт среднего числа поглощаемой энергии за ход
                mean_lost_min = np.mean(self.data_processor.data["Дома"])*self.my_objects_count["Микрорайон"]+np.mean(self.data_processor.data["Заводы"])*self.my_objects_count["Завод"]+np.mean(self.data_processor.data["Больницы"])*self.my_objects_count["Больница"]
                # Рассчёт потери энергии при передаче от главной станции до миниподстанции
                mean_lost_min2 = 0
                if mean_lost_min > 18:
                    mean_lost_min2 = mean_lost_min*0.2
                    mean_lost_min = mean_lost_min*0.8
                # Рассчёт потери энергии при передаче от миниподстанции до потребителей
                if mean_lost_min > 36:
                    mean_lost_min *= 0.2
                elif mean_lost_min > 18:
                    mean_lost_min = 18*0.2 + (mean_lost_min-18)*(((mean_lost_min-18)/4)**2)/100
                else:
                    mean_lost_min = mean_lost_min * ((mean_lost_min/4)**2) / 100
                mean_lost_min += mean_lost_min2

                self.lbl_mean_lost2.setText(str(int(mean_lost_min+mean_lost_plus)) + "МВт")
            except Exception as error:
                print("функция update_mean_labels, lbl_mean_lost2")
                print(error)
                self.lbl_mean_lost2.setText("0МВт")


    # Подсчёт рекомендуемых ценников
    def update_price_labels(self):
        try:
            if not self.data_processor.data.empty and self.data_processor.ALL_OBJECTS_COUNT:
                data = self.data_processor.get_values(self.enemy_objects_count, self.my_objects_count)
                self.lbl_price_sun2.setText(str(round(data["Солнце"], 2)))
                self.lbl_price_wind2.setText(str(round(data["Ветер"], 2)))
                self.lbl_price_house2.setText(str(round(data["Дома"], 2)))
                self.lbl_price_factory2.setText(str(round(data["Заводы"], 2)))
                self.lbl_price_hospital2.setText(str(round(data["Больницы"], 2)))
        except Exception as error:
            print("функция update_price_labels")
            print(error)
            self.lbl_price_sun2.setText("0")
            self.lbl_price_wind2.setText("0")
            self.lbl_price_house2.setText("0")
            self.lbl_price_factory2.setText("0")
            self.lbl_price_hospital2.setText("0")
